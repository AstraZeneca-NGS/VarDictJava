plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id "org.sonarqube" version "2.2"
}

version = '2.0b'


repositories { 
    mavenCentral()
    jcenter()
    //for building custom htsjdk with bam caching from our fork repo
    maven { url "https://jitpack.io" }
}

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


afterEvaluate {
    if(project.hasProperty("hprof")) {
        applicationDefaultJvmArgs = ["-Xrunhprof:cpu=times,depth=10", "-Xmx768m"]
    } else {
        applicationDefaultJvmArgs = ["-Xms768m", "-Xmx8g"]
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'commons-cli:commons-cli:1.2' 
    compile 'com.edropple.jregex:jregex:1.2_01'
    compile 'com.github.EpamLifeSciencesTeam:htsjdk:epam-ls_BAM_cache-SNAPSHOT'
    // https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.6'
    testCompile group: 'org.powermock', name: 'powermock-module-testng', version: '1.6.6'
    testCompile'org.testng:testng:6.9.13.6'

    integrationTestCompile 'org.testng:testng:6.9.13.6'

}

mainClassName = "com.astrazeneca.vardict.Main"

startScripts {
    doLast {
        unixScript.text = unixScript.text.replaceAll(/(DEFAULT_JVM_OPTS=.*)/){ all, group -> 
"""${group}

if [ -n "\$${optsEnvironmentVar}" ] ; then
    DEFAULT_JVM_OPTS=''
fi
"""
        }
    }
}

javadoc {
    options.noQualifiers 'java.lang:java.io:java.util'
    options.memberLevel=JavadocMemberLevel.PACKAGE
    exclude '**/ConcurrentHashSet*'
    exclude '**/Utils*'
    exclude '**/Tuple*'
}


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    useTestNG()
}

task integrationTestCoverageReport(type:JacocoReport) {
    dependsOn integrationTest
    executionData integrationTest
    sourceSets sourceSets.main
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

